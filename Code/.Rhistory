color = V(graph_obj)$cluster.col,
size = V(graph_obj)$size
)
edges <- igraph::as_data_frame(graph_obj, what = "edges")
edges <- merge(edges, vertices, by.x = "from", by.y = "id")
edges <- merge(edges, vertices, by.x = "to", by.y = "id", suffixes = c(".from", ".to"))
# Plot with ggplot2
ggplot() +
geom_segment(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color = weight),
linewidth = exp(-edges$weight)*8) +
geom_point(data = vertices, aes(x = x, y = y, color = I(color), size = size), alpha = 0.5, show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = label, color = I(color)),
size = 4, max.overlaps = Inf) +
scale_color_gradient(low = "blue", high = "yellow", name = "Edge Weight",
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.hjust = 0.5)) +
theme_void() +
theme(legend.position.inside = "right")+
theme(legend.position.inside = c(1, 0.1), legend.direction = "vertical")
# # Plot with ggplot2
# ggplot() +
#   geom_segment(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to),
#                linewidth = exp(-edges$weight)*8, color = "grey") +
#   geom_point(data = vertices, aes(x = x, y = y, color = color, size = size), alpha = 0.5) +
#   geom_text_repel(data = vertices, aes(x = x, y = y, label = label, color = color),
#                   size = 4, max.overlaps = Inf) +
#   scale_color_identity() +
#   theme_void() +
#   theme(legend.position = "none")
# Plot the graph without vertex labels
# plot.igraph(graph_obj, layout = graph_lo,
#             edge.width = exp(-E(graph_obj)$weight)*20,
#             vertex.color = V(graph_obj)$cluster.col.alpha,
#             vertex.size = 6,
#             vertex.label.color = V(graph_obj)$cluster.col,
#             vertex.frame.color = V(graph_obj)$cluster.col)
}
visualizeIgraphMST(sinkhorn_distance_matrix, ds)
visualizeIgraphMST <- function(sink_dist_mat, sample){
r = nrow(sink_dist_mat)
c = ncol(sink_dist_mat)
#### creating the symmetric matrix
d1 = sink_dist_mat
d2 = t(sink_dist_mat)
d = matrix(rep(0, r*c), nrow = r)
d[upper.tri(d)] = d1[upper.tri(d1)]
d[lower.tri(d)] = d2[lower.tri(d2)]
isSymmetric(d)
diag(d)
#### multi-dimensional scaling to map entities into the Sinkhorn space of spatial
#### metric MDS
# dd= cmdscale(d)
# df=data.frame(x=dd[,1], y=dd[,2])
#### non-metric MDS
# Convert the matrix to a distance object
dist_object <- as.dist(d)
# Perform non-metric multidimensional scaling
nmds_result <- isoMDS(dist_object, k = 2)
#### creating data frame with all data
df=data.frame(x=nmds_result$points[,1], y=nmds_result$points[,2])
df = as.data.frame(lapply(df, minMaxNormalize))
df$cluster.labels = names(table(sample[, ncol(sample)]))
df$cluster.labels = as.factor(df$cluster.labels)
df$cluster.size = as.numeric(as.vector(table( sample[, ncol(sample)] )))
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
#### filter adjacency matrix for edges between nearby vertices
# cutoff = summary(d)[4]
# d[d > cutoff] = 0
#### create graph from the Sinkhorn measures
graph_obj = graph_from_adjacency_matrix(d, weighted=TRUE, mode="undirected") %>%
set_vertex_attr("label", value = df$cluster.labels)
graph_obj = set_vertex_attr(graph_obj, "size", value = (df$cluster.size/max(df$cluster.size)*100))
V(graph_obj)$cluster.col = mycolor[1: length(df$cluster.labels)]
V(graph_obj)$cluster.col.alpha = add_alpha(V(graph_obj)$cluster.col, alpha = 0.5)
V(graph_obj)$name = df$cluster.labels
graph_obj = mst(graph_obj)
# graph_lo = norm_coords(as.matrix(df[ , 1:2]), xmin = NULL, ymin = NULL, zmin = NULL) # graph layout
set.seed(42)
graph_lo = layout_with_fr(graph_obj, niter = 5000)
# Convert to data frames
vertices <- data.frame(
id = V(graph_obj)$name,
x = graph_lo[,1],
y = graph_lo[,2],
label = V(graph_obj)$label,
color = V(graph_obj)$cluster.col,
size = V(graph_obj)$size
)
edges <- igraph::as_data_frame(graph_obj, what = "edges")
edges <- merge(edges, vertices, by.x = "from", by.y = "id")
edges <- merge(edges, vertices, by.x = "to", by.y = "id", suffixes = c(".from", ".to"))
# Plot with ggplot2
ggplot() +
geom_segment(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color = weight),
linewidth = 1/edges$weight) +
geom_point(data = vertices, aes(x = x, y = y, color = I(color), size = size), alpha = 0.5, show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = label, color = I(color)),
size = 4, max.overlaps = Inf) +
scale_color_gradient(low = "blue", high = "yellow", name = "Edge Weight",
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.hjust = 0.5)) +
theme_void() +
theme(legend.position.inside = "right")+
theme(legend.position.inside = c(1, 0.1), legend.direction = "vertical")
# # Plot with ggplot2
# ggplot() +
#   geom_segment(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to),
#                linewidth = exp(-edges$weight)*8, color = "grey") +
#   geom_point(data = vertices, aes(x = x, y = y, color = color, size = size), alpha = 0.5) +
#   geom_text_repel(data = vertices, aes(x = x, y = y, label = label, color = color),
#                   size = 4, max.overlaps = Inf) +
#   scale_color_identity() +
#   theme_void() +
#   theme(legend.position = "none")
# Plot the graph without vertex labels
# plot.igraph(graph_obj, layout = graph_lo,
#             edge.width = exp(-E(graph_obj)$weight)*20,
#             vertex.color = V(graph_obj)$cluster.col.alpha,
#             vertex.size = 6,
#             vertex.label.color = V(graph_obj)$cluster.col,
#             vertex.frame.color = V(graph_obj)$cluster.col)
}
visualizeIgraphMST(sinkhorn_distance_matrix, ds)
visualizeIgraphMST(sinkhorn_distance_matrix, ds)
packageVersion('reticulate')
install.packages("mvtnorm")
gc()
load_lib = c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2", "poweRlaw",
"imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR", "dismo", "lctools",
"officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS", "RColorBrewer", "this.path",
"causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy", "sampling", "scales",
"collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools",
"PerformanceAnalytics", "randomForest", "tsne", "rdist", "igraph", "Rcpp", "ggrepel", "MASS",
"Matrix", "mvtnorm", "ggplot2", "gridExtra", "matrixcalc", "msos", "reticulate", "data.table", "ggalt",
"intergraph", "reticulate")
install_lib = load_lib[!load_lib %in% installed.packages()]
for(lib in install_lib) install.packages(lib, dependencies=TRUE, update=TRUE)
sapply(load_lib, require, character=TRUE)
install_lib =load_lib
for(lib in install_lib) install.packages(lib, dependencies=TRUE, update=TRUE)
sapply(load_lib, require, character=TRUE)
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
lapply(load_lib, function(lib) {if(!require(lib, character.only = TRUE)) {message(paste("Failed to load:", lib))}})
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
version
install.packages("uninstallr")
install.packages("installr")
library(installr)
uninstall.R("4.3-arm64", GUI = TRUE)
uninstall.R("4.3", GUI = TRUE)
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
lapply(load_lib, function(lib) {if(!require(lib, character.only = TRUE)) {message(paste("Failed to load:", lib))}})
sapply(load_lib, require, character=TRUE)
install.packages("deldir")
install.packages("deldir")
sapply(load_lib, require, character=TRUE)
install.packages("spatstat")
sapply(load_lib, require, character=TRUE)
install.packages("igraph")
sapply(load_lib, require, character=TRUE)
install.packages("ggnetwork")
sapply(load_lib, require, character=TRUE)
install.packages("imager")
sapply(load_lib, require, character=TRUE)
install.packages("imager")
sapply(load_lib, require, character=TRUE)
install.packages("umap")
install.packages("umap")
sapply(load_lib, require, character=TRUE)
install.packages("spdep")
sapply(load_lib, require, character=TRUE)
install.packages("tmap")
install.packages("tmap")
sapply(load_lib, require, character=TRUE)
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
install_lib
sapply(load_lib, require, character=TRUE)
install.packages("RGBL")
install.packages("RBGL")
install.packages("intergraph")
sapply(load_lib, require, character=TRUE)
install.packages("ggalt")
install.packages("ggalt")
sapply(load_lib, require, character=TRUE)
install.packages("msos")
sapply(load_lib, require, character=TRUE)
install.packages("lctools")
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
install_lib
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
sapply(load_lib, require, character=TRUE)
install.packages("DescTools")
sapply(load_lib, require, character=TRUE)
install.packages("ks")
sapply(load_lib, require, character=TRUE)
install.packages("rvg")
sapply(load_lib, require, character=TRUE)
install.packages("raster")
sapply(load_lib, require, character=TRUE)
install.packages("imager")
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
install.packages("maptools")
install.packages("./Documents/maptools_1.1-8.tar.gz", repos = NULL, type = "source")
sapply(load_lib, require, character=TRUE)
install.packages("lctools")
install.packages("./Documents/lctools_0.2-10.tar.gz", repos = NULL, type = "source")
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("FlowSOM", force = TRUE)
library(FlowSOM)
BiocManager::install("flowCore", force = TRUE)
BiocManager::install("flowWorkspace", force = TRUE)
BiocManager::install("ConsensusClusterPlus", force = TRUE)
BiocManager::install("RBGL", force = TRUE)
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
library(kohonen)
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
reticulate::py_last_error()
reticulate::source_python('./PycharmProjects/SOT/TestGED.py')
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
reticulate::source_python('./PycharmProjects/SOT/TestGED.py')
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
!pip install numpy
reticulate::source_python('./PycharmProjects/SOT/TestGED.py')
load("/Users/sanjanashemonti/Documents/GitHub/SOT/Data/Flow/mst.RData")
#### network alignment distances
el1 = as_edgelist(mst_2_2)
el2 = as_edgelist(mst_2_3)
lb1 = setNames(as.list(as.numeric(V(mst_2_2)$label)), as.character(V(mst_2_2)$label))
lb2 = setNames(as.list(as.numeric(V(mst_2_3)$label)), as.character(V(mst_2_3)$label))
# Call the computeGED function
ged_result <- computeGED(el1, el2, lb1, lb2)
library(reticulate)
config <- py_config()
config$numpy
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
config <- py_config()
config$numpy
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
# Python integration
path_to_python <- "./PycharmProjects/SOT/.venv/"
reticulate::use_virtualenv(path_to_python)
reticulate::source_python('./PycharmProjects/SOT/TestSinkhorn.py')
reticulate::source_python('./PycharmProjects/SOT/TestGED.py')
#### network alignment distances
el1 = as_edgelist(mst_2_2)
el2 = as_edgelist(mst_2_3)
lb1 = setNames(as.list(as.numeric(V(mst_2_2)$label)), as.character(V(mst_2_2)$label))
lb2 = setNames(as.list(as.numeric(V(mst_2_3)$label)), as.character(V(mst_2_3)$label))
# Call the computeGED function
ged_result <- computeGED(el1, el2, lb1, lb2)
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "./PycharmProjects/SOT2/.venv/"
reticulate::use_virtualenv(path_to_python)
path_to_python
reticulate::py_config()
reticulate::py_run_string("import numpy")
reticulate::use_virtualenv("/Users/sanjanashemonti/PycharmProjects/SOT2/.venv", required = TRUE)
reticulate::py_config()
reticulate::py_run_string("import numpy")
setwd("~/Documents/GitHub/SOT/Code")
path_to_python <- "/Users/sanjanashemonti/PycharmProjects/SOT2/.venv"
reticulate::use_virtualenv(path_to_python, required = TRUE)
reticulate::py_run_string("import numpy")
reticulate::py_config()
path_to_python <- "/Users/sanjanashemonti/PycharmProjects/SOT2/.venv"
reticulate::use_virtualenv(path_to_python, required = TRUE)
reticulate::py_config()
reticulate::virtualenv_list()
# Loading required libraries
load_lib <- c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2",
"poweRlaw", "imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR",
"dismo", "lctools", "officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS",
"RColorBrewer", "this.path", "causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "proxy",
"sampling", "collections", "umap", "gsignal", "e1071", "caTools", "caret", "DescTools", "PerformanceAnalytics",
"randomForest", "tsne", "rdist", "Rcpp", "Matrix", "mvtnorm", "gridExtra", "matrixcalc", "msos", "reticulate",
"data.table", "ggalt", "intergraph", "kohonen")
# Install missing libraries
install_lib <- load_lib[!load_lib %in% installed.packages()]
if(length(install_lib) > 0) { install.packages(install_lib, dependencies = TRUE, update = TRUE)}
# Load libraries
sapply(load_lib, require, character=TRUE)
# Additional libraries
library(flowCore)
library(FlowSOM)
library(flowWorkspace)
library(kohonen)
# Python integration
path_to_python <- "/Users/sanjanashemonti/PycharmProjects/SOT2/.venv"
reticulate::use_virtualenv(path_to_python, required = TRUE)
reticulate::py_config()
