print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
#scale_size_continuous(range = range(1/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
scale_size_continuous(range = range(1000/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
scale_size_continuous(range = range(1/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
pheno_layout_1 = add_size_column(sample_1, pheno_layout)
graph_1 = visualizeFilteredGraph(sinkhorn_distance_matrix_1,
sample_1,
graph_lo=pheno_layout_1,
pheno_filter_matrix,
file=file_name_1)
graph_obj_1 = graph_1[[1]]
vertices_1 = graph_1[[2]]
edges_1 = graph_1[[3]]
pheno_layout_2 = add_size_column(sample_2, pheno_layout)
graph_2 = visualizeFilteredGraph(sinkhorn_distance_matrix_2,
sample_2,
graph_lo=pheno_layout_2,
pheno_filter_matrix,
file=file_name_2)
graph_obj_2 = graph_2[[1]]
vertices_2 = graph_2[[2]]
edges_2 = graph_2[[3]]
pheno_layout_3 = add_size_column(sample_3, pheno_layout)
graph_3 = visualizeFilteredGraph(sinkhorn_distance_matrix_3,
sample_3,
graph_lo=pheno_layout_3,
pheno_filter_matrix,
file=file_name_3)
graph_obj_3 = graph_3[[1]]
vertices_3 = graph_3[[2]]
edges_3 = graph_3[[3]]
# scales_edges = scaleEdgeWeights(edges_1, edges_2, edges_3)
# edges_1 = scales_edges[[1]]
# edges_2 = scales_edges[[2]]
# edges_3 = scales_edges[[3]]
w_range = range(c(edges_1$weight, edges_2$weight, edges_3$weight))
svglite(paste("../../Output/", "Graph_", strsplit(file_name_1, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
dev.off()
svglite(paste("../../Output/", "Graph_", strsplit(file_name_2, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_2, edges_2, w_range)
dev.off()
svglite(paste("../../Output/", "Graph_", strsplit(file_name_3, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_3, edges_3, w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_1_2.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_1, edges_1, vertices_2, edges_2,
graph_lo=pheno_layout,
file_name_1, file_name_2,
w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_2_3.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_2, edges_2, vertices_3, edges_3,
graph_lo=pheno_layout,
file_name_2, file_name_3,
w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_1_3.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_1, edges_1, vertices_3, edges_3,
graph_lo=pheno_layout,
file_name_1, file_name_3,
w_range)
dev.off()
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
scale_size_continuous(range = range(1000/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
scale_size_continuous(range = range(10/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
visualizeFilteredGraph_2 <- function(vertices, edges, range){
mycolor = unique( c(brewer.pal(8, "Dark2"), brewer.pal(8, "Set1"),
brewer.pal(8, "Accent"), brewer.pal(8, "Set2")) )
g_plot = ggplot() +
geom_curve(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to, color=weight, size = 1/(weight)), # linewidth = 1
curvature = 0.2, ncp = 100, show.legend = c(size = FALSE)) +
#scale_size_continuous(range = range(10/edges$weight)) +
scale_color_gradient(low = "blue", high = "#FFC20A", name = "Edge Weight",
limits = c(range[1], range[2]),
guide = guide_colorbar(direction = "vertical",
title.position = "top",
title.theme = element_text(size = 8),
title.vjust = 0.75)) +
geom_circle(data = vertices, aes(x0 = x, y0 = y, r=size/200), # minmax2(size, min(vertices$size), max(vertices$size))
fill = "wheat", color = "black", show.legend = FALSE) +
geom_text_repel(data = vertices, aes(x = x, y = y, label = paste(str_wrap(label, width = 15), "\n", round(size,2), "%", sep="")),
color = "black", size = 10, max.overlaps = Inf) +
coord_fixed() +
theme_void() +
theme(legend.direction = "vertical", legend.position = "right",
legend.text = element_text(size = 12), legend.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
#labs(title = paste("Graph-based visualization", file, "\n", sep = "\n"))
print(g_plot)
}
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
setwd(dirname(this.path::this.path()))
source("../MPMUtilities.R")
setwd(dirname(this.path::this.path()))
pheno_file = "../../Data/Raw Data/Co-inhibition/Normalized Data/Co-inhibition_cell_type.xlsx"
edge_filter = read.xlsx(pheno_file, sheet = "Test_edge_filter", rowNames = FALSE)[, -1]
# svglite(paste("../../Output/", "pheno4.svg", sep=""), width = 3.5, height = 3.5)
pheno = phenotype_distance(pheno_file, graph_kind=4, edge_filter_matrix=edge_filter)
# dev.off()
pheno_graph_obj = pheno[[1]] # the graph object for the fully-connected phenotype graph
filtered_graph_obj = pheno[[2]] # the graph object for the filtered phenotype graph
vertices_pheno =pheno[[3]] # the data structures for the nodes and edges
edges_pheno = pheno[[4]]
pheno_layout = pheno[[5]] # the layout of that filtered phenotype graph
pheno_filter_matrix = pheno[[6]] # the 0-1 adjacency matrix of the filtered phenotype graph
#### folder_path is the path to the panel's final cell type assigned data; this is for Co-inhibition panel
#### folder_name is the time point specific folder name; it can be: TP1, TP2, TP3
#### file_list has all the fcs files in the folder (both group 1 and group 2)
folder_path = "../../Data/Raw Data/Co-inhibition/Final Cell Assigned Data"
folder_name_1 = "TP1"
file_list_1 = list.files(path = paste(folder_path, "/", folder_name_1, sep = ""), pattern = "^Norm.*\\.xlsx$", full.names = TRUE)
sink_list_1 = list.files(path = paste(folder_path, "/", folder_name_1, sep = ""), pattern = "^Sink.*\\.xlsx$", full.names = TRUE)
folder_name_2 = "TP2"
file_list_2 = list.files(path = paste(folder_path, "/", folder_name_2, sep = ""), pattern = "^Norm.*\\.xlsx$", full.names = TRUE)
sink_list_2 = list.files(path = paste(folder_path, "/", folder_name_2, sep = ""), pattern = "^Sink.*\\.xlsx$", full.names = TRUE)
folder_name_3 = "TP3"
file_list_3 = list.files(path = paste(folder_path, "/", folder_name_3, sep = ""), pattern = "^Norm.*\\.xlsx$", full.names = TRUE)
sink_list_3 = list.files(path = paste(folder_path, "/", folder_name_3, sep = ""), pattern = "^Sink.*\\.xlsx$", full.names = TRUE)
file_list = c(file_list_1, file_list_2, file_list_3)
sink_list = c(sink_list_1, sink_list_2, sink_list_3)
file_name_list = list()
sample_list = list()
sd_mat_list = list()
for(i in c(1:length(file_list))){
file_path = file_list[i]
file_name = strsplit(file_path, "/")[[1]][length(strsplit(file_path, "/")[[1]])]
file_name_list[[i]] = file_name
cat(file_name, "\n")
sample = read.xlsx(file_path, sheet="Sheet 1", rowNames = FALSE)
sample = subset(sample, !(cell_type %in% c("Other cell")))
sample = sample[, c(8:ncol(sample))]
sample_list[[i]] = sample
sink_file = sink_list[i]
sinkhorn_distance_matrix = as.matrix(read.xlsx(sink_file, sheet = "Sheet 1", rowNames=FALSE))
sd_mat_list[[i]] = sinkhorn_distance_matrix
}
gc()
# Current memory usage by R
memory.size()        # Windows only, in MB
memory.size(max = TRUE)  # Peak usage
# Max memory R can allocate (Windows only)
memory.limit()       # in MB
#' Analyze Panel: GED vs Survival
#'
#' This script examines the relationship between Graph Edit Distance (GED) of
#' single-cell phenotypes and patient survival outcomes for the Co-inhibition panel.
#' It loads precomputed GED values and patient response data, merges them with
#' overall and progression-free survival information, and visualizes the results.
#' The script produces line plots of survival versus GED for responders and
#' non-responders, as well as boxplots of survival and GED distributions by response group.
#' All outputs are saved as SVG figures.
#'
setwd(dirname(this.path::this.path()))
source("../MPMUtilities.R")
setwd(dirname(this.path::this.path()))
coinhib_ged_path = "../../Data/Raw Data/Co-inhibition/Final Cell Assigned Data/Co-inhibition_GED.xlsx"
coinhib_ged = read.xlsx(coinhib_ged_path, sheet = "Sheet1")
coinhib_ged = na.omit(coinhib_ged)
coinhib_ged$Response = c("Responder","Responder","Responder","Responder","Non-responder","Non-responder",
"Non-responder","Responder","Responder","Non-responder","Non-responder",
"Non-responder","Responder")
coinhib_ged$Response = factor(coinhib_ged$Response, levels = c("Non-responder", "Responder"))
View(coinhib_ged)
os_pfs = read.xlsx("../../Data/Raw Data/OS_PFS.xlsx", sheet = "Sheet1")
os_pfs = os_pfs[-3, ]
os_pfs$Response = coinhib_ged$Response
os_pfs$GED = coinhib_ged$Baseline_After3Vac
View(os_pfs)
# Reshape the data to long format for easier plotting
os_pfs_long <- os_pfs %>%
pivot_longer(cols = c(OS, PFS),
names_to = "SurvivalType",
values_to = "SurvivalValue")
# Plot for Responders
ggplot(os_pfs_long[os_pfs_long$Response == "Responder", ],
aes(x = GED, y = SurvivalValue, color = SurvivalType)) +
#geom_jitter(width = 0.2, height = 0.2, size = 2) +
geom_line()+
#geom_smooth(method = "loess", se = FALSE) +
labs(title = "Responder: Survival vs GED",
x = "GED",
y = "Survival Time",
color = "Survival Type") +
theme_minimal()
# Plot for Non-Responders
ggplot(os_pfs_long[os_pfs_long$Response == "Non-responder", ],
aes(x = GED, y = SurvivalValue, color = SurvivalType)) +
#geom_jitter(width = 0.2, height = 0.2, size = 2) +
geom_line()+
#geom_smooth(method = "loess", se = FALSE) +
labs(title = "Non-responder: Survival vs GED",
x = "GED",
y = "Survival Time",
color = "Survival Type") +
theme_minimal()
ggplot(os_pfs_long, aes(x = Response, y = SurvivalValue, fill = SurvivalType)) +
geom_boxplot(position = position_dodge(0.5), width = 0.4, alpha=0.7, size=0.3, outlier.size = 0.5) +
scale_fill_manual(values = mycolor[c(10, 12)]) +
theme(legend.position="right", legend.text=element_text(size=8), legend.title = element_text(size=9),
legend.key = element_blank(),
#legend.box.margin=margin(-10,-10,-10,-10),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
panel.background = element_rect(fill='white', colour='grey'),
panel.grid.major = element_line(color = "grey", linewidth=0.25, linetype=2)) +
labs(title = "Survival distributions by Response", x = "Response", y = "Months from CRS-HIPEC")
ggplot(os_pfs, aes(x = Response, y = GED, fill = Response)) +
geom_boxplot(width = 0.2, alpha=0.8, size=0.3, outlier.size = 0.5) +
scale_fill_manual(values = mycolor[c(2, 1)]) +
theme(legend.position="right", legend.text=element_text(size=8), legend.title = element_text(size=9),
legend.key = element_blank(),
#legend.box.margin=margin(-10,-10,-10,-10),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=10),
axis.text.x = element_text(size = 8), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
panel.background = element_rect(fill='white', colour='grey'),
panel.grid.major = element_line(color = "grey", linewidth=0.25, linetype=2)) +
labs(title = "GED distribution by Response", x = "Response", y = "GED ( Baseline, After 3 vac )")
#' Visualize and Compare Cell Population Graphs Across Time Points
#'
#' This script generates graph-based visualizations of cell populations for a single panel
#' (e.g., Co-inhibition) across multiple time points. Graphs are constructed using
#' precomputed Sinkhorn distance matrices for each sample, which quantify differences
#' in cell-type distributions.
#'
#' The script visualizes each time point individually, overlays graphs from different
#' time points to highlight changes in population sizes and connectivity, and computes
#' the Graph Edit Distance (GED) as a quantitative measure of these changes. Outputs
#' include filtered graph visualizations (SVG files), overlay comparisons, and GED values
#' for all analyzed samples.
#'
#' Inputs:
#' - Phenotype layout and edge filter matrices
#' - Precomputed Sinkhorn distance matrices for each sample
#' - Final cell-assigned data for each time point
#'
#' Outputs:
#' - Graph visualizations of individual time points
#' - Overlays comparing graphs across time points
#' - GED values summarizing structural differences between graphs
setwd(dirname(this.path::this.path()))
source("../MPMUtilities.R")
setwd(dirname(this.path::this.path()))
pheno_file = "../../Data/Raw Data/Co-inhibition/Normalized Data/Co-inhibition_cell_type.xlsx"
edge_filter = read.xlsx(pheno_file, sheet = "Test_edge_filter", rowNames = FALSE)[, -1]
svglite(paste("../../Output/", "pheno4.svg", sep=""), width = 3, height = 3)
pheno = phenotype_distance(pheno_file, graph_kind=4, edge_filter_matrix=edge_filter)
dev.off()
pheno_graph_obj = pheno[[1]] # the graph object for the fully-connected phenotype graph
filtered_graph_obj = pheno[[2]] # the graph object for the filtered phenotype graph
vertices_pheno =pheno[[3]] # the data structures for the nodes and edges
edges_pheno = pheno[[4]]
pheno_layout = pheno[[5]] # the layout of that filtered phenotype graph
pheno_filter_matrix = pheno[[6]] # the 0-1 adjacency matrix of the filtered phenotype graph
ged = data.frame(matrix(nrow=0, ncol=3))
colnames(ged) = c("Baseline_After1Vac",	"After1Vac_After3Vac",	"Baseline_After3Vac")
#### folder_path is the path to the panel's final cell type assigned data; this is for Co-inhibition panel
#### folder_name is the time point specific folder name; it can be: TP1, TP2, TP3
#### file_list has all the fcs files in the folder (both group 1 and group 2)
folder_path = "../../Data/Raw Data/Co-inhibition/Final Cell Assigned Data"
folder_name_1 = "TP1"
file_list_1 = list.files(path = paste(folder_path, "/", folder_name_1, sep = ""), pattern = ".xlsx", full.names = TRUE)
folder_name_2 = "TP2"
file_list_2 = list.files(path = paste(folder_path, "/", folder_name_2, sep = ""), pattern = ".xlsx", full.names = TRUE)
folder_name_3 = "TP3"
file_list_3 = list.files(path = paste(folder_path, "/", folder_name_3, sep = ""), pattern = ".xlsx", full.names = TRUE)
#### pick 3 samples from 3 timepoints that are from the same patient
#### this demo is for one patient
#### this can be done for all patients in a loop
file_path_1 = file_list_1[5]
file_path_2 = file_list_2[5]
file_path_3 = file_list_3[5]
file_name_1 = strsplit(file_path_1, "/")[[1]][length(strsplit(file_path_1, "/")[[1]])]
file_name_2 = strsplit(file_path_2, "/")[[1]][length(strsplit(file_path_2, "/")[[1]])]
file_name_3 = strsplit(file_path_3, "/")[[1]][length(strsplit(file_path_3, "/")[[1]])]
cat(file_name_1, "\n", file_name_2, "\n ", file_name_3)
sample_1 = read.xlsx(file_path_1, sheet="Sheet 1", rowNames = FALSE)
sample_2 = read.xlsx(file_path_2, sheet="Sheet 1", rowNames = FALSE)
sample_3 = read.xlsx(file_path_3, sheet="Sheet 1", rowNames = FALSE)
#### filter for cells and marker channels we want
sample_1 = subset(sample_1, !(cell_type %in% c("Other cell")))
sample_1 = sample_1[, c(8:ncol(sample_1))]
sample_2 = subset(sample_2, !(cell_type %in% c("Other cell")))
sample_2 = sample_2[, c(8:ncol(sample_2))]
sample_3 = subset(sample_3, !(cell_type %in% c("Other cell")))
sample_3 = sample_3[, c(8:ncol(sample_3))]
#### extracting the saved sinkhorn distance matrix for the files selected
sink_file_1 = paste0(folder_path, "/", folder_name_1, "/Sink_", strsplit(file_name_1, "\\.")[[1]][1], ".xlsx")
sinkhorn_distance_matrix_1 = as.matrix(read.xlsx(sink_file_1, sheet = "Sheet 1", rowNames=FALSE))
sink_file_2 = paste0(folder_path, "/", folder_name_2, "/Sink_", strsplit(file_name_2, "\\.")[[1]][1], ".xlsx")
sinkhorn_distance_matrix_2 = as.matrix(read.xlsx(sink_file_2, sheet = "Sheet 1", rowNames=FALSE))
sink_file_3 = paste0(folder_path, "/", folder_name_3, "/Sink_", strsplit(file_name_3, "\\.")[[1]][1], ".xlsx")
sinkhorn_distance_matrix_3 = as.matrix(read.xlsx(sink_file_3, sheet = "Sheet 1", rowNames=FALSE))
pheno_layout_1 = add_size_column(sample_1, pheno_layout)
graph_1 = visualizeFilteredGraph(sinkhorn_distance_matrix_1,
sample_1,
graph_lo=pheno_layout_1,
pheno_filter_matrix,
file=file_name_1)
graph_obj_1 = graph_1[[1]]
vertices_1 = graph_1[[2]]
edges_1 = graph_1[[3]]
pheno_layout_2 = add_size_column(sample_2, pheno_layout)
graph_2 = visualizeFilteredGraph(sinkhorn_distance_matrix_2,
sample_2,
graph_lo=pheno_layout_2,
pheno_filter_matrix,
file=file_name_2)
graph_obj_2 = graph_2[[1]]
vertices_2 = graph_2[[2]]
edges_2 = graph_2[[3]]
pheno_layout_3 = add_size_column(sample_3, pheno_layout)
graph_3 = visualizeFilteredGraph(sinkhorn_distance_matrix_3,
sample_3,
graph_lo=pheno_layout_3,
pheno_filter_matrix,
file=file_name_3)
graph_obj_3 = graph_3[[1]]
vertices_3 = graph_3[[2]]
edges_3 = graph_3[[3]]
w_range = range(c(edges_1$weight, edges_2$weight, edges_3$weight))
svglite(paste("../../Output/", "Graph_", strsplit(file_name_1, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_1, edges_1, w_range)
dev.off()
svglite(paste("../../Output/", "Graph_", strsplit(file_name_2, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_2, edges_2, w_range)
dev.off()
svglite(paste("../../Output/", "Graph_", strsplit(file_name_3, "\\.")[[1]][1], ".svg", sep=""), width = 15, height = 15)
visualizeFilteredGraph_2(vertices_3, edges_3, w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_1_2.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_1, edges_1, vertices_2, edges_2,
graph_lo=pheno_layout,
file_name_1, file_name_2,
w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_2_3.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_2, edges_2, vertices_3, edges_3,
graph_lo=pheno_layout,
file_name_2, file_name_3,
w_range)
dev.off()
svglite(paste("../../Output/", "GraphCompare_1_3.svg", sep=""), width = 15, height = 15)
overlayFilteredGraph(vertices_1, edges_1, vertices_3, edges_3,
graph_lo=pheno_layout,
file_name_1, file_name_3,
w_range)
dev.off()
#### the loop would end here
el1 = data.frame(V1=as_edgelist(graph_obj_1)[,1],
V2=as_edgelist(graph_obj_1)[, 2],
weight=E(graph_obj_1)$weight)
el2 = data.frame(V1=as_edgelist(graph_obj_2)[,1],
V2=as_edgelist(graph_obj_2)[, 2],
weight=E(graph_obj_2)$weight)
el3 = data.frame(V1=as_edgelist(graph_obj_3)[,1],
V2=as_edgelist(graph_obj_3)[, 2],
weight=E(graph_obj_3)$weight)
labels1 = data.frame(id=vertices_1$id, label=vertices_1$label)
labels2 = data.frame(id=vertices_2$id, label=vertices_2$label)
labels3 = data.frame(id=vertices_3$id, label=vertices_3$label)
vsizes1 = data.frame(id=vertices_1$id, size=vertices_1$size)
vsizes2 = data.frame(id=vertices_2$id, size=vertices_2$size)
vsizes3 = data.frame(id=vertices_3$id, size=vertices_3$size)
ged12 = sum(abs(vsizes1$size - vsizes2$size)) + sum(abs(el1$weight - el2$weight))
ged23 = sum(abs(vsizes2$size - vsizes3$size)) + sum(abs(el2$weight - el3$weight))
ged13 = sum(abs(vsizes1$size - vsizes3$size)) + sum(abs(el1$weight - el3$weight))
ged = rbind(ged, c(ged12, ged23, ged13))
# compareGEDDistribution(ged) # to use for all patient, if the loop is implemented
